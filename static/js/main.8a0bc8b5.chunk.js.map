{"version":3,"sources":["serviceWorker.js","scryfall.ts","redux/reducers/main/index.ts","redux/reducers/game/index.ts","redux/reducers/index.ts","redux/reducers/main/actionTypes.ts","redux/reducers/game/actionTypes.ts","redux/store.ts","redux/reducers/main/actions.ts","components/ChooseDifficulty.tsx","redux/reducers/game/actions.ts","components/LoadCard.tsx","components/ChoiceButton.tsx","components/CardChoice.tsx","components/GameOver.tsx","components/Game.tsx","components/GameError.tsx","App.tsx","index.tsx"],"names":["Boolean","window","location","hostname","match","Difficulties","initialState","difficulty","playing","error","errorMessage","card","score","wrong","globalReducer","combineReducers","main","state","action","type","message","game","name","cardName","createStore","composeWithDevTools","resetMain","fatalError","cardtypes","ScryfallRandom","query","fetch","mapDispatchToProps","selectDiff","connector","connect","ownProps","props","handleChange","event","setState","inputValue","target","value","render","className","onClick","STANDARD","MODERN","VINTAGE","React","resetGame","nextCard","componentDidMount","format","then","response","json","catch","guessCard","cardNames","some","cardtype","type_line","includes","toLowerCase","typeq","colors","color_identity","map","color","join","colorsq","length","creaturetypesq","creaturetypes","typelines","split","i","tl","ct","filter","concat","creaturetypesCombined","console","log","shuffle","id","imgURL","undefined","src","alt","artist","array","uniques","forEach","elem","push","removeDuplicates","key","copy","j","Math","floor","random","restart","ReactDOM","store","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.8a0bc8b5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","//type for card object from scryfall api\r\nexport interface ScryfallCard {\r\n    name: string\r\n    id: string\r\n    set: string\r\n    type_line: string\r\n    artist?: string | null\r\n    color_identity: string[]\r\n    [key: string]: any,//allow any other properties it comes with\r\n}\r\n\r\n//all basic card types\r\nexport const cardtypes: string[] = ['Creature', 'Instant', 'Sorcery', 'Enchantment', 'Artifact', 'Land', 'Planeswalker'];\r\n\r\n//enum for different difficulties\r\nexport enum Difficulties {\r\n    STANDARD = 'STANDARD',\r\n    MODERN = 'MODERN',\r\n    VINTAGE = 'VINTAGE'\r\n}\r\n\r\nexport function ScryfallRandom(query: string | null) {\r\n    return (\r\n        query ?\r\n        fetch(`https://api.scryfall.com/cards/random?q=${query}`) :\r\n        fetch('https://api.scryfall.com/cards/random')\r\n    );\r\n}\r\n\r\nexport function ScryfallImageURL(id: string) {\r\n    return `https://api.scryfall.com/cards/${id}/?format=image&version=art_crop`;\r\n}","import {SELECT_DIFF, RESET_MAIN, FATAL_ERROR, MainActionTypes} from './actionTypes'\r\nimport {Difficulties} from '../../../scryfall';\r\n\r\n//type of state slice\r\ninterface MainState {\r\n    difficulty: Difficulties | null\r\n    playing: boolean\r\n    error: boolean\r\n    errorMessage: string\r\n}\r\n\r\n//starting state\r\nconst initialState: MainState = {\r\n    difficulty: null,\r\n    playing: false,\r\n    error: false,\r\n    errorMessage: '',\r\n}\r\n\r\n//handle actions\r\nexport default \r\n    function (\r\n        state: MainState = initialState, \r\n        action: MainActionTypes\r\n    ): MainState {\r\n\r\n    switch(action.type) {\r\n\r\n        case SELECT_DIFF:\r\n            //make sure not currently in a game\r\n            if (!state.playing) {\r\n                return {\r\n                    ...state,\r\n                    difficulty: action.difficulty,\r\n                    playing: true,\r\n                }\r\n            }\r\n            else {\r\n                return state;\r\n            }\r\n            \r\n        case FATAL_ERROR:\r\n            return {\r\n                ...state,\r\n                error: true,\r\n                errorMessage: action.message,\r\n            }\r\n\r\n        case RESET_MAIN:\r\n            return initialState;\r\n\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {GUESS_CARD, NEXT_CARD, RESET_GAME, GameActionTypes} from './actionTypes'\r\nimport {ScryfallCard} from '../../../scryfall';\r\n\r\n//type of state slice\r\ninterface GameState {\r\n    card: ScryfallCard | null\r\n    score: number\r\n    wrong: boolean\r\n}\r\n\r\n//starting state\r\nconst initialState: GameState = {\r\n    card: null,\r\n    score: 0,\r\n    wrong: false\r\n}\r\n\r\n//handle actions\r\nexport default \r\n    function (\r\n        state: GameState = initialState, \r\n        action: GameActionTypes\r\n    ): GameState {\r\n\r\n    switch(action.type) {\r\n\r\n        case GUESS_CARD:\r\n            //if guess is right\r\n            if (state.card && state.card.name === action.cardName) {\r\n                return {\r\n                    ...state,\r\n                    score: state.score + 1,\r\n                    card: null,\r\n                }\r\n            }\r\n            //if guess is wrong\r\n            else if (state.card) {\r\n                return {\r\n                    ...state,\r\n                    wrong: true,\r\n                }\r\n            }\r\n            return state;\r\n\r\n        case NEXT_CARD:\r\n            //only change state if next card is required\r\n            if (!state.card) {\r\n                return {\r\n                    ...state,\r\n                    card: action.card,\r\n                }\r\n            }\r\n            return state;\r\n\r\n        case RESET_GAME:\r\n            return initialState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n}","import {combineReducers} from 'redux';\r\nimport main from './main';\r\nimport game from './game';\r\n\r\n//combine all reducers and export\r\nexport const globalReducer = combineReducers({\r\n\r\n    main,\r\n    game,\r\n    \r\n});","import {Difficulties} from '../../../scryfall';\r\n\r\n//types for actions\r\nexport const SELECT_DIFF = 'main/SelectDiff';\r\nexport const RESET_MAIN = 'main/EndGame';\r\nexport const FATAL_ERROR = 'main/FatalError';\r\n\r\n//types of actions\r\ninterface SelectDiff {\r\n    type: typeof SELECT_DIFF\r\n    difficulty: Difficulties\r\n}\r\n\r\ninterface ResetMain {\r\n    type: typeof RESET_MAIN\r\n}\r\n\r\ninterface FatalError {\r\n    type: typeof FATAL_ERROR\r\n    message: string\r\n}\r\n\r\n//union all action types\r\nexport type MainActionTypes = SelectDiff | ResetMain | FatalError;","import {ScryfallCard} from '../../../scryfall';\r\n\r\n//types for actions\r\nexport const GUESS_CARD = 'game/GuessCard';\r\nexport const NEXT_CARD = 'game/NextCard';\r\nexport const RESET_GAME = 'game/resetGame';\r\n\r\n//types of actions\r\ninterface GuessCard {\r\n    type: typeof GUESS_CARD\r\n    cardName: string\r\n}\r\n\r\ninterface NextCard {\r\n    type: typeof NEXT_CARD\r\n    card: ScryfallCard\r\n}\r\n\r\ninterface ResetGame {\r\n    type: typeof RESET_GAME\r\n}\r\n\r\n//union all action types\r\nexport type GameActionTypes = GuessCard | NextCard | ResetGame;","import {createStore} from 'redux';\r\nimport {globalReducer} from './reducers';\r\nimport {composeWithDevTools} from 'redux-devtools-extension';\r\n\r\n//create store with combined reducers\r\nexport default createStore(\r\n    \r\n    globalReducer,\r\n    \r\n    composeWithDevTools(),//this line enables redux devtools browser extention\r\n);\r\n\r\n//get state for combined states of all reducers\r\nexport type GlobalState = ReturnType<typeof globalReducer>;","import {SELECT_DIFF, RESET_MAIN, FATAL_ERROR, MainActionTypes} from './actionTypes';\r\nimport {Difficulties} from '../../../scryfall';\r\n\r\n//action dispatch functions for each action type\r\n// should match interface in actionTypes.ts\r\n\r\nexport const selectDiff = (difficulty: Difficulties): MainActionTypes => {\r\n    return {\r\n        type: SELECT_DIFF,\r\n        difficulty,\r\n    }\r\n}\r\n\r\nexport const resetMain = (): MainActionTypes => {\r\n    return {\r\n        type: RESET_MAIN,\r\n    }\r\n}\r\n\r\nexport const fatalError = (message: string): MainActionTypes => {\r\n    return {\r\n        type: FATAL_ERROR,\r\n        message,\r\n    }\r\n}","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get dispatch actions\r\nimport {selectDiff} from '../redux/reducers/main/actions';\r\n\r\n//get difficulty types\r\nimport {Difficulties} from '../scryfall';\r\n\r\nimport './ChooseDifficulty.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n   selectDiff,\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype ChooseDifficultyProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface ChooseDifficultyState {\r\n    inputValue: string\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass ChooseDifficulty \r\n    extends React.Component \r\n    <ChooseDifficultyProps, ChooseDifficultyState> {\r\n\r\n        constructor (props: ChooseDifficultyProps) {\r\n            super (props);\r\n\r\n            //construc state using interface\r\n            this.state = {\r\n                inputValue: '0',\r\n            } as ChooseDifficultyState;\r\n        }\r\n\r\n        //input event handler using React typing\r\n        handleChange = (event: React.ChangeEvent<HTMLInputElement>): void => {\r\n            this.setState({inputValue: event.target.value});\r\n        }\r\n\r\n        render = (): JSX.Element => {\r\n            return (\r\n                <div className='ChooseDifficulty'>\r\n                    <h2>Choose Difficulty:</h2>\r\n                    <button className='standard' onClick={()=>this.props.selectDiff(Difficulties.STANDARD)}>Standard</button>\r\n                    <br/>\r\n                    <button className='modern' onClick={()=>this.props.selectDiff(Difficulties.MODERN)}>Modern</button>\r\n                    <br/>\r\n                    <button className='vintage' onClick={()=>this.props.selectDiff(Difficulties.VINTAGE)}>Vintage</button>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(ChooseDifficulty);\r\n","import {GUESS_CARD, NEXT_CARD, RESET_GAME, GameActionTypes} from './actionTypes';\r\nimport {ScryfallCard} from '../../../scryfall';\r\n\r\n//action dispatch functions for each action type\r\n// should match interface in actionTypes.ts\r\n\r\nexport const guessCard = (cardName: string): GameActionTypes => {\r\n    return {\r\n        type: GUESS_CARD,\r\n        cardName,\r\n    }\r\n}\r\n\r\nexport const nextCard = (card: ScryfallCard): GameActionTypes => {\r\n    return {\r\n        type: NEXT_CARD,\r\n        card,\r\n    }\r\n}\r\n\r\nexport const resetGame = (): GameActionTypes => {\r\n    return {\r\n        type: RESET_GAME,\r\n    }\r\n}","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get dispatch actions\r\nimport {fatalError} from '../redux/reducers/main/actions';\r\nimport {nextCard} from '../redux/reducers/game/actions';\r\n\r\n//get difficulty types\r\nimport {Difficulties} from '../scryfall';\r\n\r\n//get scryfall info\r\nimport {ScryfallCard, ScryfallRandom} from '../scryfall';\r\n\r\nimport './LoadCard.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        difficulty: state.main.difficulty,\r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n   nextCard,\r\n   fatalError,\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype LoadCardProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface LoadCardState {\r\n    \r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass LoadCard \r\n    extends React.Component \r\n    <LoadCardProps, LoadCardState> {\r\n\r\n        // constructor (props: LoadCardProps) {\r\n        //     super (props);\r\n        // }\r\n\r\n        componentDidMount = (): void => {\r\n\r\n            //difficulty determines sf api query\r\n            var format: string | null = null;\r\n            switch (this.props.difficulty) {\r\n\r\n                case Difficulties.STANDARD:\r\n                    format = 'standard';\r\n                    break;\r\n                \r\n                case Difficulties.MODERN:\r\n                    format = 'modern';\r\n                    break;\r\n\r\n                case Difficulties.VINTAGE:\r\n                    format = 'vintage';\r\n                    break;\r\n                \r\n                default:\r\n                    return;\r\n            }\r\n\r\n            //make api call\r\n            ScryfallRandom(format ? `is:booster+legal:${format}` : null)\r\n                .then ((response: any): Promise<ScryfallCard> => response.json())\r\n                .then ((card: ScryfallCard) => this.props.nextCard(card))\r\n                .catch((error?: any) => this.props.fatalError('Error with Scryfall API Call'));\r\n        }\r\n\r\n        render = (): JSX.Element => {\r\n            return (\r\n                <div>\r\n                    <h2>Loading Next Card...</h2>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(LoadCard);\r\n","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get dispatch actions\r\nimport {guessCard} from '../redux/reducers/game/actions';\r\n\r\nimport './ChoiceButton.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    cardName: string,\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        \r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n   guessCard,\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype ChoiceButtonProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface ChoiceButtonState {\r\n\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass ChoiceButton \r\n    extends React.Component \r\n    <ChoiceButtonProps, ChoiceButtonState> {\r\n\r\n        // constructor (props: ChoiceButtonProps) {\r\n        //     super (props);\r\n        // }\r\n \r\n        render = (): JSX.Element => {\r\n\r\n            return (\r\n                <>\r\n                    <button \r\n                        className='choiceButton'\r\n                        onClick={()=>this.props.guessCard(this.props.cardName)}\r\n                    >\r\n                        {this.props.cardName}\r\n                    </button>\r\n                    <br/>\r\n                </>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(ChoiceButton);\r\n","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get dispatch actions\r\nimport {fatalError} from '../redux/reducers/main/actions';\r\n\r\n//get scryfall info\r\nimport {ScryfallCard, cardtypes, ScryfallRandom, ScryfallImageURL} from '../scryfall';\r\n\r\n//get component\r\nimport ChoiceButton from './ChoiceButton';\r\n\r\nimport './CardChoice.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        card: state.game.card,\r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n    fatalError,\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype CardChoiceProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface CardChoiceState {\r\n    cardNames: string[]\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass CardChoice \r\n    extends React.Component \r\n    <CardChoiceProps, CardChoiceState> {\r\n\r\n        constructor (props: CardChoiceProps) {\r\n            super (props);\r\n\r\n            this.state = {\r\n                cardNames: [],\r\n            } as CardChoiceState\r\n        }\r\n\r\n        componentDidMount = (): void => {\r\n\r\n            if (!this.props.card) return;\r\n\r\n            //add correct card to names\r\n            this.setState({cardNames: [this.props.card.name]});\r\n\r\n            //get setcode from card obj\r\n            // var setcode: string = this.props.card.set;\r\n\r\n            //find type of card from type line\r\n            var type: string | null = null;\r\n            cardtypes.some((cardtype: string): boolean => {\r\n                if (this.props.card?.type_line.includes(cardtype)) {\r\n                    type = cardtype.toLowerCase();\r\n                    return true\r\n                }\r\n                return false\r\n            });\r\n            const typeq = type ? `+type:${type}` : '';\r\n    \r\n            //match colors\r\n            const colors: string = this.props.card.color_identity.map((color: string): string => {\r\n                return `color>=${color}`;\r\n            }).join('+OR+');\r\n            var colorsq = colors.length ? `+(${colors})` : '+color=C';\r\n\r\n            //match creature types\r\n            var creaturetypesq: string = '';\r\n            if (type === 'creature') {\r\n                var creaturetypes: string[] = [];\r\n                const typeline: string = this.props.card?.type_line;\r\n                const typelines: string[] = typeline.split('//');\r\n                for (let i: number = 0; i < typelines.length; i++) {\r\n                    const tl: string = typelines[i];\r\n                    if (tl.includes('Creature')) {\r\n                        const ct = tl.split('—')[1].split(' ').filter((type: string):boolean => type.length > 0);\r\n                        creaturetypes = creaturetypes?.concat(ct);\r\n                    }\r\n                }\r\n                const creaturetypesCombined: string = creaturetypes.map((ct: string): string => {\r\n                    return `type=${ct}`;\r\n                }).join('+OR+')\r\n                creaturetypesq = `+(${creaturetypesCombined})`;\r\n                //dont search by color if searching by creature type\r\n                colorsq = '';\r\n                console.log(creaturetypes);\r\n            }\r\n            \r\n\r\n\r\n            //fetch 3 more cards\r\n            for (let i = 0; i < 3; i++) {\r\n                ScryfallRandom(`is:booster${typeq}${colorsq}${creaturetypesq}`)\r\n                    .then((response): Promise<ScryfallCard> => response.json())\r\n                    .then((card: ScryfallCard) => {\r\n                        this.setState({\r\n                            cardNames: shuffle<string>(this.state.cardNames.concat([card.name])),\r\n                        });\r\n                    })\r\n                    .catch((error?: any) => this.props.fatalError('Error with Scryfall API Call'));\r\n            }\r\n        }\r\n \r\n        render = (): JSX.Element => {\r\n            \r\n            var imgURL: string | undefined = \r\n                this.props.card ? \r\n                ScryfallImageURL(this.props.card.id) : \r\n                undefined;\r\n\r\n            return (\r\n                <div>\r\n                    <img \r\n                        src={imgURL}\r\n                        alt=\"The card art\"\r\n                    />\r\n                    {\r\n                        this.props.card?.artist ? \r\n                        (<p>Artist: {this.props.card.artist}</p>) : \r\n                        null\r\n                    }\r\n                    {this.state.cardNames.length === 4 ? \r\n                        (removeDuplicates<string>(this.state.cardNames).map(\r\n                            (name: string): JSX.Element => {\r\n                                return (\r\n                                    <ChoiceButton \r\n                                        cardName={name}\r\n                                        key={name}\r\n                                    />\r\n                                )\r\n                            }\r\n                        ))\r\n                    :(\r\n                        <p>Loading Choices...</p>\r\n                    )}\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(CardChoice);\r\n\r\n\r\n//helper function to allow array shuffling\r\nfunction shuffle <T> (array: T[]): T[] {\r\n    var copy: T[] = [...array];\r\n    for (let i: number = copy.length - 1; i > 0; i--) {\r\n        const j: number = Math.floor(Math.random() * (i + 1));\r\n        [copy[i], copy[j]] = [copy[j], copy[i]];\r\n    }\r\n    return copy;\r\n}\r\n\r\n\r\n//helper function to remoe duplicates from an array\r\nfunction removeDuplicates <T> (array: T[]): T[] {\r\n    var uniques: T[] = [];\r\n    array.forEach((elem) => {\r\n        if (elem && !uniques.includes(elem)) uniques.push(elem);\r\n    })\r\n    return uniques;\r\n}","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get actions to end game\r\nimport {resetMain} from '../redux/reducers/main/actions';\r\nimport {resetGame} from '../redux/reducers/game/actions';\r\n\r\nimport './GameOver.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        cardName: state.game.card?.name\r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n    resetMain,\r\n    resetGame,\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype GameOverProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface GameOverState {\r\n\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass GameOver \r\n    extends React.Component \r\n    <GameOverProps, GameOverState> {\r\n\r\n        // constructor (props: GameProps) {\r\n        //     super (props);\r\n        // }\r\n\r\n        restart = (): void => {\r\n            this.props.resetGame();\r\n            this.props.resetMain();\r\n        }\r\n  \r\n        render = (): JSX.Element => {\r\n\r\n            return (\r\n                <div>\r\n                    <h1>Game Over</h1>\r\n                    <h3>The card was: {this.props.cardName}</h3>\r\n                    <button onClick={this.restart}>Reset</button>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(GameOver);","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get components\r\nimport LoadCard from './LoadCard';\r\nimport CardChoice from './CardChoice';\r\nimport GameOver from './GameOver';\r\n\r\nimport './Game.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        score: state.game.score,\r\n        card: state.game.card,\r\n        wrong: state.game.wrong,\r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype GameProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface GameState {\r\n\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass Game \r\n    extends React.Component \r\n    <GameProps, GameState> {\r\n\r\n        // constructor (props: GameProps) {\r\n        //     super (props);\r\n        // }\r\n \r\n        render = (): JSX.Element => {\r\n\r\n            return (\r\n                <div>\r\n                   <h2>Score: {this.props.score}</h2>\r\n                   {this.props.wrong ? (<GameOver/>) : null}\r\n                   {!this.props.wrong && !this.props.card ? (<LoadCard/>) : null} \r\n                   {!this.props.wrong && this.props.card ? (<CardChoice/>) : null} \r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(Game);","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from '../redux/store';\r\n\r\n//get actions to end game\r\nimport {resetMain} from '../redux/reducers/main/actions';\r\nimport {resetGame} from '../redux/reducers/game/actions';\r\n\r\nimport './GameError.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        message: state.main.errorMessage,\r\n    }\r\n}\r\n\r\n//add dispatch actions to props\r\nconst mapDispatchToProps = {\r\n    resetMain,\r\n    resetGame,\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype GameErrorProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface GameErrorState {\r\n\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\n//create component using types\r\nclass GameError \r\n    extends React.Component \r\n    <GameErrorProps, GameErrorState> {\r\n\r\n        // constructor (props: GameProps) {\r\n        //     super (props);\r\n        // }\r\n\r\n        restart = (): void => {\r\n            this.props.resetGame();\r\n            this.props.resetMain();\r\n        }\r\n  \r\n        render = (): JSX.Element => {\r\n\r\n            return (\r\n                <div>\r\n                    <h1>Fatal Error</h1>\r\n                    <h2>{this.props.message}</h2>\r\n                    <button onClick={this.restart}>Reset</button>\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(GameError);","import * as React from 'react';\r\nimport {connect, ConnectedProps} from 'react-redux';\r\n\r\n//get global state from redux\r\nimport {GlobalState} from './redux/store';\r\n\r\n//get components\r\nimport ChooseDifficulty from './components/ChooseDifficulty';\r\nimport Game from './components/Game';\r\nimport GameError from './components/GameError';\r\n\r\nimport './App.scss';\r\n\r\n\r\n// PROPS\r\n///////////////////////////////////////////////////////\r\n\r\n//add non-redux props\r\ninterface OwnProps {\r\n    //can use optional properties here like so:\r\n    // propertyName?: type\r\n}\r\n\r\n//mutate redux state to props, using ownprops if neccesary\r\nconst mapStateToProps = (state:GlobalState, ownProps: OwnProps) => {\r\n    return {\r\n        playing: state.main.playing,\r\n        error: state.main.error,\r\n    }\r\n}\r\n\r\n//add actions dispatch to props\r\nconst mapDispatchToProps = {\r\n\r\n}\r\n\r\n//combine into connector to redux store, and get type\r\nconst connector = connect(mapStateToProps, mapDispatchToProps);\r\ntype ReduxProps = ConnectedProps<typeof connector>;\r\n\r\n//type of component props is intersection of non-redux and redux props\r\ntype AppProps = OwnProps & ReduxProps;\r\n\r\n\r\n//STATE\r\n///////////////////////////////////////////////////////\r\n\r\n//type of internal component state\r\ninterface AppState {\r\n\r\n}\r\n\r\n\r\n//CLASS\r\n///////////////////////////////////////////////////////\r\n\r\nclass App \r\n    extends React.Component\r\n    <AppProps, AppState> {\r\n\r\n        // constructor (props: AppProps) {\r\n        //     super (props);\r\n        // }\r\n\r\n        render = (): JSX.Element => {\r\n\r\n            return (\r\n                <div>\r\n                    <h1>MTG Guessing Game</h1>\r\n                    {this.props.error ? (<GameError/>) : null}\r\n                    {!this.props.error && !this.props.playing ? (<ChooseDifficulty/>) : null}\r\n                    {!this.props.error && this.props.playing ? (<Game/>) : null}\r\n                </div>\r\n            );\r\n        }\r\n}\r\n\r\n//combine with connector and export\r\nexport default connector(App);\r\n","import * as React from 'react';\r\nimport * as ReactDOM from 'react-dom';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport {Provider} from 'react-redux';\r\n\r\n//access redux store\r\nimport store from './redux/store';\r\n\r\n//access main application component\r\nimport App from './App';\r\n\r\nimport './index.scss';\r\n\r\n\r\n//render whole app, while providing store to components\r\nReactDOM.render(\r\n\r\n    <React.StrictMode>\r\n\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n\r\n    </React.StrictMode>,\r\n\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}